@{
    ViewBag.Title = "Calendar";
}

<aside class="calendar-aside">
	@(Html.Kendo().Calendar()
        .Name("calendar")
        .Value(new DateTime(2013, 6, 24))
        .Events(e => e.Change("onCalenderChange"))
	)

	<div class="calendar-resources-list">	
		<div class="calendar-resource selected" data-resource-value="1">Personal</div>
		<div class="calendar-resource selected" data-resource-value="2">Work</div>
        <div class="calendar-resource selected" data-resource-value="3">Development</div>
        <div class="calendar-resource selected" data-resource-value="4">Design</div>
		<div class="calendar-resource selected" data-resource-value="5">Marketing</div>
	</div>
</aside>

<div class="content">
	<div class="view-header-wrapper">	
		<div class="btn-export-pdf" onclick="onExportBtnClick('exportPdf')">Export to PDF</div>
		<div class="btn-export-image" onclick="onExportBtnClick('exportImage')">Export to Image</div>
		<div class="btn-import">Import</div>
	</div>

	@(Html.Kendo().Scheduler<TelerikMvcWebMail.Models.EventViewModel>()
        .Name("scheduler")
        .Date(new DateTime(2013,6,24))
        .StartTime(new DateTime(2013, 6, 24, 7, 00, 00))
        .ShowWorkHours(true)
        .Views(views =>
        {
            views.DayView();
            views.WorkWeekView(workWeekView => workWeekView.Selected(true));
            views.WeekView();
            views.MonthView();
            views.AgendaView();
            views.TimelineView();
        })
        .Timezone("Etc/UTC")
        .DataSource(d => d
            .Model(m =>
            {
                m.Id(f => f.TaskID);
                m.Field(f => f.Title).DefaultValue("No title");
                m.Field(f => f.OwnerID).DefaultValue(1);
                m.RecurrenceId(f => f.RecurrenceID);
            })
            .Read("Read", "Calendar")
            .Create("Create", "Calendar")
            .Destroy("Destroy", "Calendar")
            .Update("Update", "Calendar")
            .Filter(filters =>
            {
                filters.Add(model => model.OwnerID)
                    .IsEqualTo(1)
                    .Or().IsEqualTo(2)
                    .Or().IsEqualTo(3)
                    .Or().IsEqualTo(4)
                    .Or().IsEqualTo(5);
            })
        )
        .Resources(resource =>
        {
            resource.Add(m => m.OwnerID)
                .Title("Category")
                .DataTextField("Text")
                .DataValueField("Value")
                .DataColorField("Color")
                .BindTo(new[] {
                    new { Text = "Personal", Value = 1, Color = "#6BCC65" } ,
                    new { Text = "Work", Value = 2, Color = "#1E8EDF" } ,
                    new { Text = "Development", Value = 3, Color = "#E155D9" } ,
                    new { Text = "Design", Value = 4, Color = "#DD1C3C" } ,
                    new { Text = "Marketing", Value = 5, Color = "#FFC600" }
                });
        })
	)
</div>
<script>
	$('.calendar-resource').on("click", function () {
		$(this).toggleClass('selected');
	});

	$(function () {
		$(".calendar-resources-list > div").click(function (e) {
			var selected = $.map($(".calendar-resources-list > div.selected"), function (div) {
				return parseInt($(div).attr("data-resource-value"));
			});

			var filter = {
				logic: "or",
				filters: $.map(selected, function (value) {
					return {
						operator: "eq",
						field: "OwnerID",
						value: value
					};
				})
			};

			var scheduler = $("#scheduler").data("kendoScheduler");

			scheduler.dataSource.filter(filter);
		});
	})

	function onExportBtnClick(e) {
		if (e == "exportPdf") {
			exportSchedulerToPdf($("#scheduler"), "Calendar.pdf");
		}
		else if (e == "exportImage") {
			exportSchedulerToImage($("#scheduler"), "Calendar.png")
		}
	}

	function exportSchedulerToPdf(content, fileName) {
		kendo.drawing.drawDOM(content)
			.then(function (group) {
				return kendo.drawing.exportPDF(group, {
					paperSize: "auto",
					margin: { left: "1cm", top: "1cm", right: "1cm", bottom: "1cm" }
				});
			})
			.done(function (data) {
				kendo.saveAs({
					dataURI: data,
					fileName: fileName
				});
			});
	}

	function exportSchedulerToImage(content, fileName) {
		kendo.drawing.drawDOM(content)
			.then(function (group) {
				return kendo.drawing.exportImage(group);
			})
			.done(function (data) {
				kendo.saveAs({
					dataURI: data,
					fileName: fileName
				});
			});
	}

	function onCalenderChange(e) {
	    var scheduler = $("#scheduler").data("kendoScheduler");
	    scheduler.date(e.sender.current());
	}
</script>



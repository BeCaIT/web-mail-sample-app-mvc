@{
    ViewBag.Title = "Mail";
}

@section PageStyles {
    <link href="@Url.Content("~/Content/mail.css")" rel="stylesheet" type="text/css" />
}

<style>
    .unread {
        font-weight: bold;
    }
</style>

@model IEnumerable<TelerikMvcWebMail.Models.MailViewModel>

@Html.Partial("Sidebar")

<section class="main-section">
    @(Html.Kendo().ToolBar()
        .Name("IndexToolbar")
        .HtmlAttributes(new { @class = "toolbar" })
        .Items(items =>
        {
            items.Add().Type(CommandType.SplitButton).Click("toolBarReplyButtonClick").Text("Reply").MenuButtons(menuButtons =>
            {
                menuButtons.Add().Text("Reply").Id("RE");
                menuButtons.Add().Text("Reply All").Id("RE");
                menuButtons.Add().Text("Forward").Id("FW");
            });

            items.Add().Type(CommandType.Button).Text("Delete").Click("toolBarButtonClick").Id("Deleted");

            items.Add().Type(CommandType.SplitButton).Click("toolBarButtonClick").Text("Move").MenuButtons(menuButtons =>
            {
                menuButtons.Add().Text("Inbox").Id("Inbox");
                menuButtons.Add().Text("Junk").Id("Junk");
                menuButtons.Add().Text("Drafts").Id("Drafts");
                menuButtons.Add().Text("Deleted").Id("Deleted");
                menuButtons.Add().Text("NativeScript").Id("NativeScript");
                menuButtons.Add().Text("KendoUI").Id("KendoUI");
                menuButtons.Add().Text("Sitefinity").Id("Sitefinity");
            });

            items.Add().Type(CommandType.SplitButton).Click("toolBarButtonClick").Text("Junk").MenuButtons(menuButtons =>
            {
                menuButtons.Add().Text("Report Spam").Id("Junk");
            });

            items.Add().Type(CommandType.SplitButton).Click("toolBarMoreButtonClick").Text("More").MenuButtons(menuButtons =>
            {
                menuButtons.Add().Text("Mark as read").Id("read"); ;
                menuButtons.Add().Text("Mark as unread").Id("unread"); ;
                menuButtons.Add().Text("Print").Id("print"); ;
            });

            items.Add().Type(CommandType.Button).SpriteCssClass("k-tool-icon k-justifyLeft").Click("changeToVerticalPanes");
            items.Add().Type(CommandType.Button).SpriteCssClass("k-tool-icon k-justifyRight").Click("changeToHorizontalPanes");
        })
    )
    <div class="inner-mail-content">
        <div class="mail-grid">
            <input type="text" class="k-input search-textbox" placeholder="Search mail ..." name="to-textbox">
            @(Html.Kendo().Grid(Model)
                .Name("mainWidget")
                .Columns(columns =>
                {
                    columns.Bound(p => p.IsRead)
                        .Title("")
                        .Width(60)
                        .Filterable(false)
                        .ClientTemplate("<input type='checkbox' class='chkbx' />");
                    columns.Bound(p => p.From).Title("From");
                    columns.Bound(p => p.Subject).Title("Subject");
                    columns.Bound(p => p.Subject).Title("Subject").ClientTemplate("<p>#= Subject #</p><p>#= From #</p>").Hidden(true);
                    columns.Bound(p => p.Date).Title("Date").Format("{0:g}");
                })
                .HtmlAttributes(new { style = "height: 100%;" })
                .Sortable()
                .Scrollable()
                .Groupable()
                .Selectable(s => s.Mode(GridSelectionMode.Multiple))
                .DataSource(dataSource => dataSource
                    .Ajax()
                    .AutoSync(true)
                    .PageSize(20)
                    .Model(model => model.Id(p => p.ID))
                    .Create(create => create.Action("Create", "Home"))
                    .Read(read => read.Action("Read", "Home"))
                    .Update(update => update.Action("Update", "Home"))

                )
                .Events(e => e.Change("mailSelectionChanged").DataBound("mailGridDataBound"))
            )
        </div>
        <div class="mail-details">
            <div class="mail-details-header">
                <h2 class="mail-subject"></h2>
                <p class="mail-date"></p>
                <p class="mail-sender-wrapper">
                    <label>To:</label>
                    <span class="mail-sender"></span>
                </p>
            </div>
            <p class="mail-text"></p>
        </div>
    </div>
</section>
<script>
    function toolBarButtonClick(e) {
        var grid = $("#mainWidget").data("kendoGrid");

        for (var i = 0; i < grid.select().length; i++) {
            var selectedItem = grid.dataItem(grid.select()[i]);
            selectedItem.Folder = e.id;
            selectedItem.dirty = true;
        }

        grid.dataSource.sync();

        var treeview = $("#navigationTreeView").data("kendoTreeView");
        var dataItem = treeview.dataItem(treeview.select());

        if (dataItem) {
            grid.dataSource.filter({ field: "Folder", operator: "contains", value: dataItem.value });
        }
    }

    function toolBarReplyButtonClick(e) {
        var grid = $("#mainWidget").data("kendoGrid");
        var selected = grid.dataItem(grid.select());
        //encodes the contacts names sent to the Action by replacing the empty spaces in them with %20

        if (!selected) {
            $(".main-section").load('@(Url.Action("NewMail", "Home", new { @id = "placeholder0"}))'.replace("placeholder0", e.id));
        }
        else {
            var contact = selected.From.replace(/ /g, '%20');
            $(".main-section").load('@(Url.Action("NewMail", "Home", new { @id = "placeholder0", @contact = "placeholder1"}))'.replace("placeholder0", e.id).replace("placeholder1", contact));
        }
    }

    function toolBarMoreButtonClick(e) {
        var grid = $("#mainWidget").data("kendoGrid");
        var selectedRows = grid.select();

        if (e.id == "read" || e.id == "unread") {
            for (var i = 0; i < selectedRows.length; i++) {
                var item = grid.dataItem(selectedRows[i]);
                e.id == "read" ? item.IsRead = true : item.IsRead = false;
                item.dirty = true;
                e.id == "read" ? $(selectedRows[i]).removeClass("unread") : $(selectedRows[i]).addClass("unread");;
            }

            if (e.id == "unread") {
                Cookies.set('markedAsUnread', 'marked');
            }

            grid.dataSource.sync();
        }
        else if (e.id == "print") {
            kendo.drawing.drawDOM($(".mail-details"))
                .then(function (group) {
                    return kendo.drawing.exportPDF(group, {
                        paperSize: "auto",
                        margin: { left: "1cm", top: "1cm", right: "1cm", bottom: "1cm" }
                    });
                })
                .done(function (data) {
                     kendo.saveAs({
                        dataURI: data,
                        fileName: "Mail.pdf"
                    });
                });
        }
    }

    function changeToVerticalPanes() {
        var grid = $("#mainWidget").data("kendoGrid");
        grid.hideColumn(1);
        grid.hideColumn(2);
        grid.showColumn(3);
        $('.mail-grid').attr('style', "display: inline-block; width: 35%");
        $('.mail-details').attr('style', "display: inline-block; vertical-align: top;");
    }

    function changeToHorizontalPanes() {
        var grid = $("#mainWidget").data("kendoGrid");
        grid.hideColumn(3);
        grid.showColumn(1);
        grid.showColumn(2);
        $('.mail-grid').attr('style', "display: block;");
        $('.mail-details').attr('style', "display: block;");
    }

    function selectFolder(e) {
        var dataItem = this.dataItem(e.node);
        var selectedText = e.sender.dataItem(e.node).value;
        Cookies.set('selected', kendo.stringify(dataItem.index));
        selected = Cookies.get('selected');

        var mailsGrid = $("#mainWidget").data("kendoGrid");
        if (!mailsGrid) {
            window.location.href = "/Home/Index";
        } else {
            mailsGrid.dataSource.filter({ field: "Folder", operator: "contains", value: selectedText });
        }
    }

    function getinitialNumberOfItems(gridData) {
        var numbers = { Inbox: 0, Junk: 0, Drafts: 0, Deleted: 0, NativeScript: 0, KendoUI: 0, Sitefinity: 0 };
        for (var i = 0; i < gridData.length; i++) {
            var currentItemFolder = gridData[i].Folder;
            numbers[currentItemFolder] += 1;
        }

        return numbers;
    }

    function mailGridDataBound(e) {
        var grid = e.sender;

        for (var i = 0; i < grid.tbody.find(">tr").length; i++) {
            var item = grid.dataItem(grid.tbody.find(">tr")[i]);
            if (item.IsRead == false) {
                $(grid.tbody.find(">tr")[i]).addClass("unread")
            }
        }

        polulateSelectedRows(grid);

        $.ajax({
            url: '@Url.Action("Read", "Home")',
            success: function (gridData) {
                var numbers = getinitialNumberOfItems(gridData.Data);
                var data = [{
                    text: "Inbox " + numbers.Inbox,
                    value: "Inbox"
                }, {
                    text: "Junk " + numbers.Junk,
                    value: "Junk"
                }, {
                    text: "Drafts " + numbers.Drafts,
                    value: "Drafts"
                }, {
                    text: "Deleted " + numbers.Deleted,
                    value: "Deleted"
                }, {
                    text: "NativeScript " + numbers.NativeScript,
                    value: "NativeScript"
                }, {
                    text: "KendoUI " + numbers.KendoUI,
                    value: "KendoUI"
                }, {
                    text: "Sitefinity " + numbers.Sitefinity,
                    value: "Sitefinity"
                }];

                populateNavigationTree(data);
            }
        });
    }

    function mailSelectionChanged(e) {
        var selectedRows = this.select();

        selectionChanged(e.sender, 'mailsSelectedRow');
        checkSelectedCheckbox(selectedRows);

        if (selectedRows.length === 1) {
            var dataItem = this.dataItem(selectedRows[0]);
            populateDetailsView(dataItem);
        }
    }

    function checkSelectedCheckbox(selectedRows) {
        $('input.chkbx').prop('checked', false);

        var checkboxes = selectedRows.find('.chkbx');
        checkboxes.prop('checked', true);
    }

    function populateDetailsView(item) {
        $('.mail-subject').text(item.Subject);
        $('.mail-sender').text(item.From);
        $('.mail-date').text(item.Date);
        $('.mail-text').html(item.Text);
    }

    $('.new-mail').on('click', function (e) {
        $(".main-section").load('@(Url.Action("NewMail", "Home", new { @id = "RE"}))');
    });

    $(".search-textbox").on('keyup', function (e) {
        var text = $(e.target).val();
        var tasksGrid = $("#mainWidget").data("kendoGrid");

        if (text === null || text == '') {
            tasksGrid.dataSource.filter({});
        } else {
            tasksGrid.dataSource.filter({ field: "Subject", operator: "contains", value: text });
        }
    });
</script>

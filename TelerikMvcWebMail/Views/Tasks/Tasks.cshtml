@{
    ViewBag.Title = "Tasks";
}

@model IEnumerable<TelerikMvcWebMail.Models.NoteViewModel>

<aside class="treeview-wrapper">
    <span class="add-new-task" >Add Task</span>
    @*@Html.ActionLink("Add Task", "NewTask")*@

    @(Html.Kendo().TreeView()
        .Name("tasksTreeView")
        .Events(e => e.Select("selecttaskFolder"))
    )

    <div class="about-and-source">
        <div>
            @Html.ActionLink("About This App", "About", "Home")
        </div>
        <div>
            @Html.ActionLink("Download Source Code", "", "")
        </div>
        <p>
            Copyright &copy; @DateTime.Now.Year Progress Software Corporation and/or its subsidiaries or affiliates.
        </p>
        <p>
            All Rights Reserved.
        </p>
    </div>
</aside>

<div class="content">
	<div class="view-header-wrapper">	
		<div class="btn-delete">Delete</div>
	</div>
	<div class="notes">
        <input type="text" class="k-input long-textbox search-textbox" placeholder="Search tasks ..." name="to-textbox">
		@(Html.Kendo().Grid(Model)
            .Name("noteGrid")
            .Columns(columns =>
            {
                columns.Bound(p => p.CheckBoxCheked)
                    .Title("")
                    .Width(80)
                    .ClientTemplate("<input type='checkbox' #= CheckBoxCheked ? checked='checked': '' # class='chkbx' />");
                columns.Bound(p => p.Subject).Title("Subject");
                columns.Bound(p => p.CreatedOn).Title("Created On").Width(300).Format("{0:g}");
                columns.Bound(p => p.Category).Title("Category");

            })
            .Editable(e => e.Mode(GridEditMode.InLine))
            .Selectable(s => s.Mode(GridSelectionMode.Multiple))
            .DataSource(dataSource => dataSource
                .Ajax()
                .Read(read => read.Action("Tasks_Read", "Tasks"))
                .Create(create => create.Action("Tasks_Create", "Tasks"))
                .Update(update => update.Action("Tasks_Update", "Tasks"))
                .Destroy(destroy => destroy.Action("Tasks_Destroy", "Tasks"))
                .Model(model => {
                    model.Id(p => p.Id);
                    model.Field(p => p.Id).Editable(false);
                    model.Field(p => p.CheckBoxCheked).Editable(false);
                    model.Field(p => p.CreatedOn).Editable(false);
                })
            )
            .Events(e => e
                .Change("noteSelectionChanged")
                .DataBound("tasksGridDataBound")
                .Remove("tasksGridItemRemove")
            )
        )
	</div>
</div>

<script>
    var numbers;
    var isInitialLoad = true;

    function noteSelectionChanged(e) {
        var selectedRows = this.select();
        $('input.chkbx').prop('checked', false);

        var checkboxes = selectedRows.find('.chkbx');
        checkboxes.prop('checked', true);
    }

    function createNewTask() {
        var tasksGrid = $("#noteGrid").data("kendoGrid");
        tasksGrid.addRow();
    }

    function getinitialNumberOfItems(gridData) {
        numbers = { All: 0, Personal: 0, Work: 0 };

        for (var i = 0; i < gridData.length; i++) {
            var currentItemCategory = gridData[i].Category;
            numbers[currentItemCategory] += 1;
        }
    }

    function tasksGridDataBound(e) {
        var tasksGrid = e.sender;

        if (isInitialLoad) {
            isInitialLoad = false;
            getinitialNumberOfItems(tasksGrid.dataSource.data());
        }

        var data = [{
            text: "All " + numbers.All,
            value: "All"
        }, {
            text: "Personal " + numbers.Personal,
            value: "Personal"
        }, {
            text: "Work " + numbers.Work,
            value: "Work"
        }];

        var newDataSource = new kendo.data.HierarchicalDataSource({ data: data });
        var navigationTreeView = $('#tasksTreeView').data('kendoTreeView');
        navigationTreeView.setDataSource(newDataSource);
    }

    function tasksGridItemRemove(e) {
        var removedItemValue = e.model.Category;
        numbers[removedItemValue] -= 1;
    }

    function selecttaskFolder(e) {
        var selectedText = e.sender.dataItem(e.node).value;

        var tasksGrid = $("#noteGrid").data("kendoGrid");
        if (!tasksGrid) {
            window.location.href = "/Tasks/Tasks";
        } else {
            tasksGrid.dataSource.filter({ field: "Category", operator: "contains", value: selectedText });
        }
    }

    $(document).ready(function() {
        $(".search-textbox").on('keyup', function (e) {
            var text = $(e.target).val();

            var tasksGrid = $("#noteGrid").data("kendoGrid");
            tasksGrid.dataSource.filter({ field: "Subject", operator: "contains", value: text });
        });

        $('.btn-delete').on('click', function () {
            var tasksGrid = $("#noteGrid").data("kendoGrid");

            var checkboxesToBeDeleted = $('.chkbx:checkbox:checked');
            var rows = checkboxesToBeDeleted.parents('tr[role="row"]');

            for (var i = 0; i < rows.length; i++) {
                tasksGrid.removeRow(rows[i]);
            }
        });

        $('.add-new-task').on('click', function (e) {
            $(".content").load('@(Url.Action("NewTask", "Tasks"))');
        });
    });
</script>

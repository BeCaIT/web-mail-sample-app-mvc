@{
    ViewBag.Title = "Mail";
}

@section PageStyles {
    <link href="@Url.Content("~/Content/mail.css")" rel="stylesheet" type="text/css" />
}

@model IEnumerable<TelerikMvcWebMail.Models.MailViewModel>

<aside class="main-sidebar">
    <div class="content">
        <span class="new-mail">New Mail</span>
        @(Html.Kendo().TreeView()
        .Name("mailsTreeView")
        .Events(e => e.Select("selectMailFolder"))
        )
    </div>

    <div class="footer">
        <div>
            @Html.ActionLink("About This App", "About", "Home")
        </div>
        <div>
            @Html.ActionLink("Download Source Code", "", "")
        </div>
        <p>
            Copyright &copy; @DateTime.Now.Year Progress Software Corporation and/or its subsidiaries or affiliates.
        </p>
        <p>
            All Rights Reserved.
        </p>
    </div>
</aside>

<section class="main-section">
    @(Html.Kendo().ToolBar()
        .Name("IndexToolbar")
        .Items(items =>
        {
            items.Add().Type(CommandType.SplitButton).Click("toolBarReplyButtonClick").Text("Reply").MenuButtons(menuButtons =>
            {
                menuButtons.Add().Text("Reply").Id("RE");
                menuButtons.Add().Text("Reply All").Id("RE");
                menuButtons.Add().Text("Forward").Id("FW");
            });

            items.Add().Type(CommandType.Button).Text("Delete").Click("toolBarButtonClick").Id("Deleted");

            items.Add().Type(CommandType.SplitButton).Click("toolBarButtonClick").Text("Move").MenuButtons(menuButtons =>
            {
                menuButtons.Add().Text("Inbox").Id("Inbox");
                menuButtons.Add().Text("Junk").Id("Junk");
                menuButtons.Add().Text("Drafts").Id("Drafts");
                menuButtons.Add().Text("Deleted").Id("Deleted");
            });

            items.Add().Type(CommandType.SplitButton).Click("toolBarButtonClick").Text("Junk").MenuButtons(menuButtons =>
            {
                menuButtons.Add().Text("Report Spam").Id("Junk");
            });

            items.Add().Type(CommandType.SplitButton).Text("More").MenuButtons(menuButtons =>
            {
                menuButtons.Add().Text("Mark as read");
                menuButtons.Add().Text("Mark as unread");
                menuButtons.Add().Text("Print");
            });

            items.Add().Type(CommandType.Button).SpriteCssClass("k-tool-icon k-justifyLeft").Click("changeToVerticalPanes");
            items.Add().Type(CommandType.Button).SpriteCssClass("k-tool-icon k-justifyRight").Click("changeToHorizontalPanes");
        })
    )
    <div class="inner-mail-content">
        <div class="mail-grid">
            @(Html.Kendo().Grid(Model)
                .Name("MailGrid")
                .Columns(columns =>
                {
                    columns.Bound(p => p.CheckBoxCheked)
                        .Title("")
                        .Width(80)
                        .ClientTemplate("<input type='checkbox' #= CheckBoxCheked ? checked='checked': '' # class='chkbx' />");
                    columns.Bound(p => p.From).Title("From").Width(300);
                    columns.Bound(p => p.Subject).Title("Subject");
                    columns.Bound(p => p.Subject).Title("Subject").ClientTemplate("<p>#= Subject #</p><p>#= From #</p>");
                    columns.Bound(p => p.Date).Title("Date").Width(300).Format("{0:g}");
                })
                .HtmlAttributes(new { style = "height: 100%;" })
                .Sortable()
                .Scrollable()
                .Filterable()
                .Groupable()
                .Selectable(s => s.Mode(GridSelectionMode.Multiple))
                .DataSource(dataSource => dataSource
                    .Ajax()
                    .AutoSync(true)
                    .PageSize(20)
                    .Model(model => model.Id(p => p.MailID))
                    .Create(create => create.Action("Create", "Home"))
                    .Read(read => read.Action("Read", "Home"))
                    .Update(update => update.Action("Update", "Home"))

                )
                .Events(e => e.Change("mailSelectionChanged").DataBound("mailGridDataBound"))
            )
        </div>
        <div class="mail-details">
            <div class="mail-details-header">
                <p class="mail-subject"></p>
                <p class="mail-sender"></p>
                <p class="mail-date"></p>
            </div>
            <p class="mail-text"></p>
        </div>
    </div>
</section>
<script>
    var selected = Cookies.get('selected');

    function setSelectedNode(selected) {
        var treeview = $("#mailsTreeView").data("kendoTreeView");
        if (selected) {
            Cookies.remove('selected');
            var node = $("#mailsTreeView").find('li').eq(selected);
            treeview.select(node);
        }
    }

    function toolBarButtonClick(e) {
        var grid = $("#MailGrid").data("kendoGrid");

        for (var i = 0; i < grid.select().length; i++) {
            var selectedItem = grid.dataItem(grid.select()[i]);
            selectedItem.Folder = e.id;
            selectedItem.dirty = true;
        }

        grid.dataSource.sync();

        var treeview = $("#mailsTreeView").data("kendoTreeView");
        var dataItem = treeview.dataItem(treeview.select());

        if (dataItem) {
            grid.dataSource.filter({ field: "Folder", operator: "contains", value: dataItem.value });
        }
    }

    function toolBarReplyButtonClick(e) {
        var grid = $("#MailGrid").data("kendoGrid");
        var selected = grid.dataItem(grid.select());
        //encodes the contacts names sent to the Action by replacing the empty spaces in them with %20

        if (!selected) {
            $(".main-section").load('@(Url.Action("NewMail", "Home", new { @id = "placeholder0"}))'.replace("placeholder0", e.id));
        }
        else {
            var contact = selected.From.replace(/ /g, '%20');

            $(".main-section").load('@(Url.Action("NewMail", "Home", new { @id = "placeholder0", @contact = "placeholder1"}))'.replace("placeholder0", e.id).replace("placeholder1", contact));
        }
    }

    function changeToVerticalPanes() {
        $('.mail-grid').attr('style', "display: inline-block; width: 35%");
        $('.mail-details').attr('style', "display: inline-block; vertical-align: top;");
    }

    function changeToHorizontalPanes() {
        $('.mail-grid').attr('style', "display: block;");
        $('.mail-details').attr('style', "display: block;");
    }

    function selectMailFolder(e) {
        var dataItem = this.dataItem(e.node);
        var selectedText = e.sender.dataItem(e.node).value;
        Cookies.set('selected', kendo.stringify(dataItem.index));
        selected = Cookies.get('selected');

        var mailsGrid = $("#MailGrid").data("kendoGrid");
        if (!mailsGrid) {
            window.location.href = "/Home/Index";
        } else {
            mailsGrid.dataSource.filter({ field: "Folder", operator: "contains", value: selectedText });
        }
    }

    function getinitialNumberOfItems(gridData) {
        var numbers = { Inbox: 0, Junk: 0, Drafts: 0, Deleted: 0, NativeScript: 0, KendoUI: 0, Sitefinity: 0 };
        for (var i = 0; i < gridData.length; i++) {
            var currentItemFolder = gridData[i].Folder;
            numbers[currentItemFolder] += 1;
        }

        return numbers;
    }

    function mailGridDataBound(e) {
        var navigationTreeView = $('#mailsTreeView').data('kendoTreeView');

        $.ajax({
            url: '@Url.Action("Read", "Home")',
            success: function (gridData) {
                var numbers = getinitialNumberOfItems(gridData.Data);
                var data = [{
                    text: "Inbox " + numbers.Inbox,
                    value: "Inbox"
                }, {
                    text: "Junk " + numbers.Junk,
                    value: "Junk"
                }, {
                    text: "Drafts " + numbers.Drafts,
                    value: "Drafts"
                }, {
                    text: "Deleted " + numbers.Deleted,
                    value: "Deleted"
                }, {
                    text: "NativeScript " + numbers.NativeScript,
                    value: "NativeScript"
                }, {
                    text: "KendoUI " + numbers.KendoUI,
                    value: "KendoUI"
                }, {
                    text: "Sitefinity " + numbers.Sitefinity,
                    value: "Sitefinity"
                }];

                var newDataSource = new kendo.data.HierarchicalDataSource({ data: data });
                navigationTreeView.setDataSource(newDataSource);
                if (selected) {
                    setSelectedNode(selected);
                }
                else {
                    setSelectedNode("0");
                }
            }
        });
    }

    function mailSelectionChanged(e) {
        var selectedRows = this.select();
        $('input.chkbx').prop('checked', false);

        var checkboxes = selectedRows.find('.chkbx');
        checkboxes.prop('checked', true);

        if (selectedRows.length === 1) {
            var dataItem = this.dataItem(selectedRows[0]);
            populateDetailsView(dataItem);
        }
    }

    function populateDetailsView(item) {
        $('.mail-subject').text(item.Subject);
        $('.mail-sender').text(item.From);
        $('.mail-date').text(item.Date);
        $('.mail-text').html(item.Text);
    }

    $('.new-mail').on('click', function (e) {
        $(".main-section").load('@(Url.Action("NewMail", "Home", new { @id = "RE"}))');
    });
</script>
